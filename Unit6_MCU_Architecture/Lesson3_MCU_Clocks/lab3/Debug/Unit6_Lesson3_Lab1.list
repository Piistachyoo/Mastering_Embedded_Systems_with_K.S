
Unit6_Lesson3_Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f0  080002f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f0  080002f0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002f0  080002f0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f0  080002f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f4  080002f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080002fc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080002fc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000018c  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000f8  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000202b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00020300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000b0e  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000130  00000000  00000000  00020e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002f0a  00000000  00000000  00020f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00023e78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00023ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080002d8 	.word	0x080002d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080002d8 	.word	0x080002d8

08000170 <main>:
}R_ODR_t;

volatile R_ODR_t *R_ODR = (volatile R_ODR_t *)(PORTA_BASE + 0x0C);

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	/*Bit 16 PLLSRC: PLL entry clock source
	Set and cleared by software to select PLL clock source. This bit can be written only when
	PLL is disabled.
	0: HSI oscillator clock / 2 selected as PLL input clock
	1: HSE oscillator clock selected as PLL input clock*/
	RCC_CFGR &= ~(1<<16);
 8000176:	4b2b      	ldr	r3, [pc, #172]	; (8000224 <main+0xb4>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a2a      	ldr	r2, [pc, #168]	; (8000224 <main+0xb4>)
 800017c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000180:	6013      	str	r3, [r2, #0]
	1011: PLL input clock x 13
	1100: PLL input clock x 14
	1101: PLL input clock x 15
	1110: PLL input clock x 16
	1111: PLL input clock x 16*/
	RCC_CFGR |= (0b0110 << 18);
 8000182:	4b28      	ldr	r3, [pc, #160]	; (8000224 <main+0xb4>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a27      	ldr	r2, [pc, #156]	; (8000224 <main+0xb4>)
 8000188:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800018c:	6013      	str	r3, [r2, #0]
	0xx: HCLK not divided
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/
	RCC_CFGR |= (0b101 << 11);
 800018e:	4b25      	ldr	r3, [pc, #148]	; (8000224 <main+0xb4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a24      	ldr	r2, [pc, #144]	; (8000224 <main+0xb4>)
 8000194:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000198:	6013      	str	r3, [r2, #0]
	0xx: HCLK not divided
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/
	RCC_CFGR |= (0b100 << 8);
 800019a:	4b22      	ldr	r3, [pc, #136]	; (8000224 <main+0xb4>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a21      	ldr	r2, [pc, #132]	; (8000224 <main+0xb4>)
 80001a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001a4:	6013      	str	r3, [r2, #0]
	Set and cleared by software to enable PLL.
	Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
	PLL clock is used as system clock or is selected to become the system clock.
	0: PLL OFF
	1: PLL ON*/
	RCC_CR |= (1<<24);
 80001a6:	4b20      	ldr	r3, [pc, #128]	; (8000228 <main+0xb8>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a1f      	ldr	r2, [pc, #124]	; (8000228 <main+0xb8>)
 80001ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001b0:	6013      	str	r3, [r2, #0]
	System is enabled).
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/
	RCC_CFGR |= (0b10<<0);
 80001b2:	4b1c      	ldr	r3, [pc, #112]	; (8000224 <main+0xb4>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a1b      	ldr	r2, [pc, #108]	; (8000224 <main+0xb4>)
 80001b8:	f043 0302 	orr.w	r3, r3, #2
 80001bc:	6013      	str	r3, [r2, #0]


	RCC_APB2ENR |= (1<<2); // Enable RCC Clock
 80001be:	4b1b      	ldr	r3, [pc, #108]	; (800022c <main+0xbc>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a1a      	ldr	r2, [pc, #104]	; (800022c <main+0xbc>)
 80001c4:	f043 0304 	orr.w	r3, r3, #4
 80001c8:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= 0xFF0FFFFF;
 80001ca:	4b19      	ldr	r3, [pc, #100]	; (8000230 <main+0xc0>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a18      	ldr	r2, [pc, #96]	; (8000230 <main+0xc0>)
 80001d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001d4:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 80001d6:	4b16      	ldr	r3, [pc, #88]	; (8000230 <main+0xc0>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a15      	ldr	r2, [pc, #84]	; (8000230 <main+0xc0>)
 80001dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e0:	6013      	str	r3, [r2, #0]
	while(1){
		R_ODR->ODR_field.pin13 = 1;
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <main+0xc4>)
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	8813      	ldrh	r3, [r2, #0]
 80001e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001ec:	8013      	strh	r3, [r2, #0]
		for(int i=0; i<100000;i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <main+0x8a>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <main+0xc8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	ddf8      	ble.n	80001f4 <main+0x84>
		R_ODR->ODR_field.pin13 = 0;
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <main+0xc4>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	8813      	ldrh	r3, [r2, #0]
 8000208:	f36f 334d 	bfc	r3, #13, #1
 800020c:	8013      	strh	r3, [r2, #0]
		for(int i=0; i<100000;i++);
 800020e:	2300      	movs	r3, #0
 8000210:	603b      	str	r3, [r7, #0]
 8000212:	e002      	b.n	800021a <main+0xaa>
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	603b      	str	r3, [r7, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <main+0xc8>)
 800021e:	4293      	cmp	r3, r2
 8000220:	ddf8      	ble.n	8000214 <main+0xa4>
		R_ODR->ODR_field.pin13 = 1;
 8000222:	e7de      	b.n	80001e2 <main+0x72>
 8000224:	40021004 	.word	0x40021004
 8000228:	40021000 	.word	0x40021000
 800022c:	40021018 	.word	0x40021018
 8000230:	40010804 	.word	0x40010804
 8000234:	20000000 	.word	0x20000000
 8000238:	0001869f 	.word	0x0001869f

0800023c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000240:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <LoopForever+0x6>)
  ldr r1, =_edata
 8000246:	490d      	ldr	r1, [pc, #52]	; (800027c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000248:	4a0d      	ldr	r2, [pc, #52]	; (8000280 <LoopForever+0xe>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800024c:	e002      	b.n	8000254 <LoopCopyDataInit>

0800024e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000252:	3304      	adds	r3, #4

08000254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000258:	d3f9      	bcc.n	800024e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800025c:	4c0a      	ldr	r4, [pc, #40]	; (8000288 <LoopForever+0x16>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000260:	e001      	b.n	8000266 <LoopFillZerobss>

08000262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000264:	3204      	adds	r2, #4

08000266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000268:	d3fb      	bcc.n	8000262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026a:	f000 f811 	bl	8000290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026e:	f7ff ff7f 	bl	8000170 <main>

08000272 <LoopForever>:

LoopForever:
  b LoopForever
 8000272:	e7fe      	b.n	8000272 <LoopForever>
  ldr   r0, =_estack
 8000274:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000280:	080002f8 	.word	0x080002f8
  ldr r2, =_sbss
 8000284:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000288:	20000020 	.word	0x20000020

0800028c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC1_2_IRQHandler>
	...

08000290 <__libc_init_array>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	2600      	movs	r6, #0
 8000294:	4d0c      	ldr	r5, [pc, #48]	; (80002c8 <__libc_init_array+0x38>)
 8000296:	4c0d      	ldr	r4, [pc, #52]	; (80002cc <__libc_init_array+0x3c>)
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	10a4      	asrs	r4, r4, #2
 800029c:	42a6      	cmp	r6, r4
 800029e:	d109      	bne.n	80002b4 <__libc_init_array+0x24>
 80002a0:	f000 f81a 	bl	80002d8 <_init>
 80002a4:	2600      	movs	r6, #0
 80002a6:	4d0a      	ldr	r5, [pc, #40]	; (80002d0 <__libc_init_array+0x40>)
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <__libc_init_array+0x44>)
 80002aa:	1b64      	subs	r4, r4, r5
 80002ac:	10a4      	asrs	r4, r4, #2
 80002ae:	42a6      	cmp	r6, r4
 80002b0:	d105      	bne.n	80002be <__libc_init_array+0x2e>
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b8:	4798      	blx	r3
 80002ba:	3601      	adds	r6, #1
 80002bc:	e7ee      	b.n	800029c <__libc_init_array+0xc>
 80002be:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c2:	4798      	blx	r3
 80002c4:	3601      	adds	r6, #1
 80002c6:	e7f2      	b.n	80002ae <__libc_init_array+0x1e>
 80002c8:	080002f0 	.word	0x080002f0
 80002cc:	080002f0 	.word	0x080002f0
 80002d0:	080002f0 	.word	0x080002f0
 80002d4:	080002f4 	.word	0x080002f4

080002d8 <_init>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	bf00      	nop
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr

080002e4 <_fini>:
 80002e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e6:	bf00      	nop
 80002e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ea:	bc08      	pop	{r3}
 80002ec:	469e      	mov	lr, r3
 80002ee:	4770      	bx	lr
